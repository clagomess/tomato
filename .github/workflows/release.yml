name: release
on:
  push:
    tags:
      - 'v*'

jobs:
  version:
    timeout-minutes: 10
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'maven'

      - name: Get Git tag
        id: extract_git_tag
        run: |
          git_tag=${GITHUB_REF##*/}
          echo "GIT_TAG=${git_tag#v}" >> $GITHUB_ENV
          echo "git_tag=${git_tag#v}" >> $GITHUB_OUTPUT
          echo "Tag: ${git_tag#v}"

      - name: Get Maven Project Version
        run: |
          version=`mvn help:evaluate -Dexpression=project.version -q -DforceStdout`
          echo "PROJECT_VERSION=$version" >> $GITHUB_ENV
          echo "Version: $version"

      - name: Validate Maven version against Git tag
        run: |
          if [ "$PROJECT_VERSION" != "$GIT_TAG" ]; then
            echo "Version mismatch: pom.xml version ($PROJECT_VERSION) does not match Git tag ($GIT_TAG)."
            exit 1
          fi

    outputs:
      git_tag: ${{ steps.extract_git_tag.outputs.git_tag }}

  build:
    needs: version
    timeout-minutes: 10
    runs-on: ubuntu-latest

    env:
      GIT_TAG: ${{ needs.version.outputs.git_tag }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'maven'

      - name: Maven
        run: mvn -B clean compile package -DskipTests

      - name: Dist
        run: |
          mkdir -p ./target/dist/tomato-$GIT_TAG
          cp -R ./target/release/** ./target/dist/tomato-$GIT_TAG

      - uses: actions/upload-artifact@v4
        with:
          name: tomato-${{env.GIT_TAG}}
          path: ./target/dist

  release-windows:
    needs: [version, build]
    timeout-minutes: 10
    runs-on: windows-latest

    env:
      GIT_TAG: ${{ needs.version.outputs.git_tag }}

    steps:
      - uses: microsoft/setup-msbuild@v2

      - name: Install WiX
        run: dotnet tool install --global wix

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17

      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: tomato-${{env.GIT_TAG}}
          path: ./target/dist

      - name: Build MSI
        run: |
          jpackage `
          --type msi `
          --name Tomato `
          --app-version $env:GIT_TAG `
          --vendor Tomato `
          --icon ./src/main/resources/com/github/clagomess/tomato/ui/component/favicon/favicon.ico `
          --input ./target/dist/tomato-$env:GIT_TAG `
          --main-jar tomato-$env:GIT_TAG.jar `
          --main-class com.github.clagomess.tomato.Main `
          --java-options "-splash:`$APPDIR/splash.png -Dfile.encoding=UTF-8" `
          --win-upgrade-uuid "a6f3d5f2-ad83-4fc7-97ce-6444c991e2fe" `
          --win-dir-chooser `
          --win-per-user-install `
          --win-menu `
          --win-shortcut `
          --dest ./target/dist `
          --verbose
          mv ./target/dist/Tomato-$env:GIT_TAG.msi ./target/dist/tomato-$env:GIT_TAG-amd64.msi

      - name: Sign MSI
        run: |
          $SignToolPath = Get-ChildItem -Path "C:\Program Files (x86)\Windows Kits\10\bin\**\x64" `
          -Recurse -Filter "signtool.exe" | Select-Object -ExpandProperty FullName -First 1
          echo "SignTool Path: $SignToolPath"
          [System.Convert]::FromBase64String("${{ secrets.CODE_SIGN_CERT_PFX }}") | Set-Content -Path ./target/dist/code-sign-ks.pfx -AsByteStream
          & $SignToolPath sign /v `
          /td SHA256 `
          /tr http://timestamp.digicert.com `
          /f "./target/dist/code-sign-ks.pfx" `
          /p "${{ secrets.CODE_SIGN_CERT_PASS }}" `
          /fd SHA256 `
          "./target/dist/tomato-$env:GIT_TAG-amd64.msi"

      - uses: actions/upload-artifact@v4
        with:
          name: tomato-${{env.GIT_TAG}}-amd64.msi
          compression-level: 0
          path: ./target/dist/Tomato-${{env.GIT_TAG}}-amd64.msi

  release-debian:
    needs: [version, build]
    timeout-minutes: 10
    runs-on: ubuntu-latest

    env:
      GIT_TAG: ${{ needs.version.outputs.git_tag }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: tomato-${{env.GIT_TAG}}
          path: ./target/dist

      - name: Prepare
        run: |
          mkdir -p tomato/DEBIAN
          mkdir -p /tmp/tomato/usr/share/doc/tomato
          mkdir -p tomato/usr/share/tomato
          mkdir -p tomato/usr/bin

      - name: Copy Release
        run: |
          cp -R ./target/dist/tomato-${GIT_TAG}/** ./tomato/usr/share/tomato

      - name: Copy executable
        run: |
          cp ./build-debian/tomato.sh ./tomato/usr/bin/tomato
          echo "/usr/share/tomato/tomato-${GIT_TAG}.jar" >> ./tomato/usr/bin/tomato
          chmod +x ./tomato/usr/bin/tomato
          
      - name: Copy icons
        run: |
          mkdir -p ./tomato/usr/share/icons/hicolor/64x64/apps
          mkdir -p ./tomato/usr/share/icons/hicolor/128x128/apps
          cp ./build-debian/icon-64x64.png ./tomato/usr/share/icons/hicolor/64x64/apps/tomato.png
          cp ./build-debian/icon-128x128.png ./tomato/usr/share/icons/hicolor/128x128/apps/tomato.png

      - name: Copy desktop entry
        run: |
          mkdir -p ./tomato/usr/share/applications
          cp ./build-debian/tomato.desktop ./tomato/usr/share/applications/tomato.desktop
          echo "Version=${GIT_TAG}" >> ./tomato/usr/share/applications/tomato.desktop

      - name: Copy control
        run: |
          cp ./build-debian/control ./tomato/DEBIAN/
          echo "Version: ${GIT_TAG}" >> ./tomato/DEBIAN/control
          chmod -R 755 ./tomato/DEBIAN

      - name: Copy copyright
        run: |
          cp ./build-debian/copyright ./tomato/usr/share/doc/tomato/

      - name: Build
        run: |
          dpkg-deb --build ./tomato
          mv ./tomato.deb ./tomato-${GIT_TAG}-all.deb
          
      - uses: actions/upload-artifact@v4
        with:
          name: tomato-${{env.GIT_TAG}}-all.deb
          compression-level: 0
          path: ./tomato-${{env.GIT_TAG}}-all.deb

